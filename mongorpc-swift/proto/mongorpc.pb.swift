// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mongorpc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// `Struct` represents a structured data value, consisting of fields
/// which map to dynamically typed values. In some languages, `Struct`
/// might be supported by a native representation. For example, in
/// scripting languages like JS a struct is represented as an
/// object. The details of that representation are described together
/// with the proto support for the language.
///
/// The JSON representation for `Struct` is JSON object.
struct Mongorpc_Proto_V1_Struct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unordered map of dynamically typed values.
  var fields: Dictionary<String,Mongorpc_Proto_V1_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// `ListValue` is a wrapper around a repeated field of values.
///
/// The JSON representation for `ListValue` is JSON array.
struct Mongorpc_Proto_V1_ListValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Repeated field of dynamically typed values.
  var values: [Mongorpc_Proto_V1_Value] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Represents a Dynamic Object
struct Mongorpc_Proto_V1_Value {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The kind of value.
  var kind: Mongorpc_Proto_V1_Value.OneOf_Kind? = nil

  /// Represents a null value.
  var null: SwiftProtobuf.Google_Protobuf_NullValue {
    get {
      if case .null(let v)? = kind {return v}
      return .nullValue
    }
    set {kind = .null(newValue)}
  }

  /// Represents a double value.
  var number: Int64 {
    get {
      if case .number(let v)? = kind {return v}
      return 0
    }
    set {kind = .number(newValue)}
  }

  /// Represents a double value.
  var double: Double {
    get {
      if case .double(let v)? = kind {return v}
      return 0
    }
    set {kind = .double(newValue)}
  }

  /// Represents a string value.
  var string: String {
    get {
      if case .string(let v)? = kind {return v}
      return String()
    }
    set {kind = .string(newValue)}
  }

  /// Represents a boolean value.
  var bool: Bool {
    get {
      if case .bool(let v)? = kind {return v}
      return false
    }
    set {kind = .bool(newValue)}
  }

  /// Represents a bytes value.
  var bytes: Data {
    get {
      if case .bytes(let v)? = kind {return v}
      return Data()
    }
    set {kind = .bytes(newValue)}
  }

  /// Represents a structured value.
  var `struct`: Mongorpc_Proto_V1_Struct {
    get {
      if case .struct(let v)? = kind {return v}
      return Mongorpc_Proto_V1_Struct()
    }
    set {kind = .struct(newValue)}
  }

  /// Represents a repeated `Value`.
  var list: Mongorpc_Proto_V1_ListValue {
    get {
      if case .list(let v)? = kind {return v}
      return Mongorpc_Proto_V1_ListValue()
    }
    set {kind = .list(newValue)}
  }

  /// Represents a timestamp value.
  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .time(let v)? = kind {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {kind = .time(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The kind of value.
  enum OneOf_Kind: Equatable {
    /// Represents a null value.
    case null(SwiftProtobuf.Google_Protobuf_NullValue)
    /// Represents a double value.
    case number(Int64)
    /// Represents a double value.
    case double(Double)
    /// Represents a string value.
    case string(String)
    /// Represents a boolean value.
    case bool(Bool)
    /// Represents a bytes value.
    case bytes(Data)
    /// Represents a structured value.
    case `struct`(Mongorpc_Proto_V1_Struct)
    /// Represents a repeated `Value`.
    case list(Mongorpc_Proto_V1_ListValue)
    /// Represents a timestamp value.
    case time(SwiftProtobuf.Google_Protobuf_Timestamp)

  #if !swift(>=4.1)
    static func ==(lhs: Mongorpc_Proto_V1_Value.OneOf_Kind, rhs: Mongorpc_Proto_V1_Value.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.null, .null): return {
        guard case .null(let l) = lhs, case .null(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.number, .number): return {
        guard case .number(let l) = lhs, case .number(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.double, .double): return {
        guard case .double(let l) = lhs, case .double(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.string, .string): return {
        guard case .string(let l) = lhs, case .string(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bool, .bool): return {
        guard case .bool(let l) = lhs, case .bool(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bytes, .bytes): return {
        guard case .bytes(let l) = lhs, case .bytes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.struct, .struct): return {
        guard case .struct(let l) = lhs, case .struct(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.list, .list): return {
        guard case .list(let l) = lhs, case .list(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.time, .time): return {
        guard case .time(let l) = lhs, case .time(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mongorpc.proto.v1"

extension Mongorpc_Proto_V1_Struct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Struct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Mongorpc_Proto_V1_Value>.self, value: &self.fields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fields.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Mongorpc_Proto_V1_Value>.self, value: self.fields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mongorpc_Proto_V1_Struct, rhs: Mongorpc_Proto_V1_Struct) -> Bool {
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mongorpc_Proto_V1_ListValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mongorpc_Proto_V1_ListValue, rhs: Mongorpc_Proto_V1_ListValue) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mongorpc_Proto_V1_Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "null"),
    2: .same(proto: "number"),
    3: .same(proto: "double"),
    4: .same(proto: "string"),
    5: .same(proto: "bool"),
    6: .same(proto: "bytes"),
    7: .same(proto: "struct"),
    8: .same(proto: "list"),
    9: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtobuf.Google_Protobuf_NullValue?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .null(v)
        }
      }()
      case 2: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .number(v)
        }
      }()
      case 3: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .double(v)
        }
      }()
      case 4: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .string(v)
        }
      }()
      case 5: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .bool(v)
        }
      }()
      case 6: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .bytes(v)
        }
      }()
      case 7: try {
        var v: Mongorpc_Proto_V1_Struct?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .struct(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .struct(v)
        }
      }()
      case 8: try {
        var v: Mongorpc_Proto_V1_ListValue?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .list(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .list(v)
        }
      }()
      case 9: try {
        var v: SwiftProtobuf.Google_Protobuf_Timestamp?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .time(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .time(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .null?: try {
      guard case .null(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .number?: try {
      guard case .number(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }()
    case .double?: try {
      guard case .double(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }()
    case .string?: try {
      guard case .string(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }()
    case .bool?: try {
      guard case .bool(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }()
    case .bytes?: try {
      guard case .bytes(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }()
    case .struct?: try {
      guard case .struct(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .list?: try {
      guard case .list(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .time?: try {
      guard case .time(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mongorpc_Proto_V1_Value, rhs: Mongorpc_Proto_V1_Value) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
